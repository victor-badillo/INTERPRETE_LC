USER MANUAL

LAMBDA-CALCULUS INTERPRETER

AUTHOR: Víctor Nathanael Badillo Aldama

Introduction:
    This is user manual purpose is to ilustrate the user with some examples the new developed functionalities.
    
1.1 Multiline expressions.

1.2 More complete "Pretty-printer".
    To implement this section, a modification was first made in main.ml to return the type string before the term string. 
    After this small change, lambda.ml was specifically modified in the string_of_term function. 
    This function was subdivided, creating a cascade of functions that call each other according to the expression encountered, 
    adding brackets only when required and removing any excess brackets. The subfunctions created are string_of_appTerm and string_of_atomicTerm. 
    Additionally, excess brackets were removed in string_of_ty.

    In order to obtain a good identation it is necessary to change the return value of string_of_term and directly print in the screen the string_of_term.
    For simplicity me change the name of string_of_term to pretty_printer. Depending on the kind of term, we use a box to encapsulate a part of the output
    and insert the apropiate identation. print_space() is used in order to break line or insert a white space.

2.1 Fixed-point combinator
    ...
    In order to declare recursive functions and not recursive functions without the use of operator in, it is necessary to modify de parser and create
    a rule for this two cases. One rule for let was created in the 'term' rule and one other for letrec.



TECNIC MANUAL

LAMBDA-CALCULUS INTERPRETER

AUTHOR: Víctor Nathanael Badillo Aldama

Introduction:
    This tecnic manual purpose is to explain what modules from the original implementation have been modified and what
    kind of changes were done to obtain de the final implementation.
    